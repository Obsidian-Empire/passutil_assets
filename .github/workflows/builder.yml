on:
  push:
    branches:
      - main

name: Minify and Release assets

jobs:
  minify_assets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
          key: ${{ runner.os }}-python-deps-${{ hashFiles('builder/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-deps-

      - name: Restore previous build
        uses: actions/cache@v3
        with:
          path: assets
          key: ${{ runner.os }}-assets-${{ hashFiles('contents/assets/**') }}
          restore-keys: |
            ${{ runner.os }}-assets-

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "builder/pyproject.toml"

      - name: Install the project
        run: |
          cd builder
          uv sync --all-extras --dev

      - name: Run minify
        run: |
          cd builder
          uv run converter.py ../contents/assets ../assets

      - name: Save build cache
        uses: actions/cache/save@v3
        with:
          path: assets
          key: ${{ runner.os }}-assets-${{ hashFiles('contents/assets/**') }}

      - name: Check assets before upload
        run: |
          echo "Contents of assets directory:"
          ls -la assets || echo "Assets directory not found"

          # Убедимся, что директория существует
          mkdir -p assets

      - name: Upload minified assets
        uses: actions/upload-artifact@v4
        with:
          name: minified-assets
          path: assets/
          retention-days: 1

  create_release:
    needs: minify_assets
    runs-on: ubuntu-latest
    steps:
      - name: Download minified assets
        uses: actions/download-artifact@v4
        with:
          name: minified-assets
          path: assets

      - name: Archive assets
        run: tar -czf assets.tar.gz assets/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: assets.tar.gz
          name: minified assets
          tag_name: release-${{ github.run_number }}

  update_compressed_branch:
    needs: minify_assets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download minified assets
        uses: actions/download-artifact@v4
        with:
          name: minified-assets
          path: assets

      - name: Debug artifacts
        run: |
          echo "Listing contents of current directory:"
          ls -la
          echo "Listing contents of assets directory:"
          ls -la assets || echo "Assets directory does not exist"
          # Если директория assets пуста, создадим пустой файл для демонстрации
          mkdir -p assets
          touch assets/.gitkeep

      - name: Push to compressed branch
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git fetch origin
          if git show-ref --quiet refs/heads/compressed; then
            git checkout compressed
          else
            git checkout --orphan compressed
          fi
          rm -rf *

          if [ "$(ls -A assets 2>/dev/null)" ]; then
            cp -R assets/* .
          else
            echo "Assets directory is empty or does not exist. Creating placeholder."
            touch .gitkeep
          fi

          git add .
          git commit -m "Update compressed assets from ${{ github.sha }}" || echo "No changes to commit"
          git push origin compressed
